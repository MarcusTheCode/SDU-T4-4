@startuml

class Start
class Game
class Command
class CommandWords
class Parser
class Room
Enum CommandWord
class TimeClass
class StatusScore
class Item
class Items

Start --> Game
Game --> Command
Game --> Item
Game --> Items
Game --> Room
Game --> Parser
Game --> TimeClass
Game --> StatusScore
Parser --> Command
Parser --> CommandWords
CommandWords --> CommandWord
Room --> Items
Item --> StatusScore
Items --> Item
Command --> CommandWord
TimeClass --> StatusScore

class Start{
main(args: String[])
}

class Game{
parser: Parser
currentRoom: Room
createRooms(): void
play(): void
printWelcome(): void
processCommand(command: Command): boolean
printHelp(): void
goRoom(command: Command): void
quit(Command command): boolean
interactItem(command Command): void
}

class TimeClass #4169E1{
time: int
dayNumber: int
dayName: String
addTime(): void
timeChecker(): void
dayChecker: void
getTime():void
sleep():void
gameEnd(): boolean
}

class StatusScore #4169E1{
Score: int
ChangeScore(int)
setScore()
getScore()
gameOver()
}

class Item #4169E1{
itemName: String
interactionMessage: String
StatusScoreChange: int
getItemName(): String
itemInteraction(): void
}

Class Items #4169E1{
itemsArray: Item[]
printItems(): String
getItemsArray(): Item[]
}

Class Room{
description: String
exits: Hashmap<String, Room>
getRoomId(): int
setExit(direction: String, neighbor: Room): Void
getShortDescription(): String
getLongDescription(): String
getExitString(): String
getExit(direction: String): Room
getItems(): Items
}

Enum CommandWord{
GO
QUIT
HELP
UNKNOWN
INTERACT
TIME
toString(): String
}

class Command{
commandWord: CommandWord
secondWord: String
getCommandWord(): CommandWord
getSecondWord(): String
isUnkown(): boolean
hasSecondWord(): boolean
}

class Parser{
commands: CommandWords
reader: Scanner
getCommand(): Command
showCommands(): Void
}

class CommandWords{
validCommands: Hashmap<String, CommandWord>
getCommandWord(commandWord: String): CommandWord
isCommand(aString: String): boolean
showAll(): void
}
@enduml